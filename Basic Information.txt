									*******************BASIC INFORMATION*******************

Input Format->
		is_correct([[],[]...],['','','',''....],ANS)

		i)	The first list in input of is_correct is a list of lists of variables with their types in the format--['type_of_variable','variable_name']
			In case the variable is a type of address to int,address to float,address to bitset or address to boolean--
			the format should be of the form--['address','type_of_variable','variable_name'].
			In case you wish to enter no variables in expression, the first list should of the type [[]],i.e. the input is always list of lists
			
			Example of first list--[['int','x'],['float','y'],['boolean','z'],['address','int','w']]
		
		ii)	The second list contains the expression in which constants of type int and float(eg 2,4.05) should be entered
			without '', constants of type boolean(eg.true,false) should be entered in quotes; all other variables and operators
			operators should be entered inside ''. The input type of ternary operator is as follows--
			
			(exp 1 in reverse_polish, '?', expression 2 in reverse_polish, expression 3 in reverse_polish, ':')
			
			Any other expression should be entered into reverse_polish(postfix) notation.
			Please refer to appendix to see how to convert from other notations to reverse_polish
		
		iii)	The third member is simply the variable ANS.

Top Level Predicates->
	1.	is_correct				(Input Format as mentioned above)

	2.	look(X,Z,A)-- 			X is the first list of the input as given in is_correct() functor, Z is the variable name to be searched in the
								list, A is an auxilliary variable

	3.	pop(List1,X,List2)-- 	Standard pop operation as in a stack with an element being removed from List1 leading to List2

	4.	push(X,List1,List2)-- 	Standard push operation as in a stack, element X is appended to List1 to form List2

	5.	checker(X,W,Ans,[])-- 	X is the first list of input, W is the second list, Ans is an auxilliary variable,[] is an empty list
								This is the main functor doing the type checking, type of each variable and constant is pushed into
								the stack, as an operator is encountered, type checking is done while popping the members from the stack
								if the expression is found to be type correct, the result of expression evaluated is pushed to the stack

	6.	head(X,[X|_] -- 		is used to extract the head of a list to X

	7.	second(X,[_X|_] -- 		is used to extract the second element of a list to X

	8.	operator(X) --			check whether X is a vlid operator or not

	9.	binop(X) --				checks whether X is a binary operator or not

	10.	unop(X) --				checks whether X is unary operator or not 

Some Built-in Predicates in Prolog used in Program->
	1. 	last(List, X)
	2. 	member(X,List)
	3. 	integer(X).
	4. 	float(X).
	5. 	number(X).
	 
Below is a list of various categories of operators that could be given in input
	1.	arop
	2.	tercop
	3.	terqop
	4.	varop
	5.	varbop
	6.	varintbop
	7.	relop
	8.	bitop
	9.	bitintop
	10.	addop
	11.	boolop
	12.	bituop
	13.	booluop
